{"name":"Practical Machine Learning","tagline":"Peer assessment project","body":"## Introduction\r\n\r\nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, our goal is to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways (exercise class). We will build a model to predict the exercise class based on the data from the accelerometers.\r\n\r\n## Data\r\n\r\n\r\n```r\r\nif (!file.exists(\"./data/pml-training.csv\")) {\r\n    download.file(\"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\", \r\n        \"./data/pml-training.csv\", method='curl')\r\n}\r\nif (!file.exists(\"./data/pml-testing.csv\")) {\r\n    download.file(\"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\", \r\n        \"./data/pml-testing.csv\", method='curl')\r\n}\r\n\r\ndf_train_base <- read.csv('./data/pml-training.csv', sep=',', stringsAsFactors = FALSE, strip.white = TRUE)\r\ndf_test_base <- read.csv('./data/pml-testing.csv', sep=',', strip.white = TRUE, stringsAsFactors = FALSE)\r\n```\r\n\r\nWe set an initial seed to ensure this analysis can be reproduced:\r\n\r\n\r\n```r\r\nset.seed(123)\r\n```\r\n\r\n## Exploratory Analysis\r\n\r\nThe training set contains 19622 observations and 160 features. We can see that some features are only present for some observations. These observations correspond to observations windows where the data from the sensors is being derived (average, variance, etc..). The windows last 0.5 seconds to 2.5 seconds and correspond to one exercise class. This approach taken by the research team can not be used for our problem as the observations we have to predict are instantaneous measurements.\r\n\r\nWe can therefore clean up the dataset by removing all the derived data generated by the research team for their window based approach. Also the time related data are not relevant for our exercise as we're looking to classify instatanous measurements. Finally, the name of the participant and the X feature are also irrelevant.\r\n\r\n\r\n```r\r\ndf_train <- df_train_base %>%\r\n    select(-starts_with(\"avg_\"),\r\n           -starts_with(\"var_\"),\r\n           -starts_with(\"stddev_\"),\r\n           -starts_with(\"max_\"),\r\n           -starts_with(\"min_\"),\r\n           -starts_with(\"amplitude_\"),\r\n           -starts_with(\"kurtosis_\"),\r\n           -starts_with(\"skewness_\"),\r\n           -new_window,\r\n           -num_window,\r\n           -user_name,\r\n           -raw_timestamp_part_1,\r\n           -raw_timestamp_part_2,\r\n           -cvtd_timestamp,\r\n           -X)\r\ndim(df_train)\r\n```\r\n\r\n```\r\n## [1] 19622    53\r\n```\r\n\r\nWe are now left with 53 features corresponding to instantaneous measurements of the sensors installed on the participants.\r\n\r\nThe output is the class and must be converted to a factor:\r\n\r\n\r\n```r\r\ndf_train$classe <- as.factor(df_train$classe)\r\n```\r\n\r\n## Training\r\n\r\nWe will split the training set to keep a test set on the side in order to estimate the performances of our models. Here the split is to keep 70% of the data for training, and the remaining 30% for testing. We will use the testing set to estimate the out-of-sample accuracy of our model.\r\n\r\n\r\n```r\r\ninTrain <- createDataPartition(y=df_train$classe, p=0.7, list=FALSE)\r\ntraining <- df_train[inTrain, ]\r\ntesting <- df_train[-inTrain,]\r\n```\r\n\r\nWe can now train a random forest model, using a 3-fold cross validation to determine the best parameters.\r\n\r\n\r\n```r\r\nmyTrainControl <- trainControl(method=\"cv\", number=3)\r\nmodFit <- train(classe ~ ., method=\"rf\", data=training, prox=TRUE, trControl = myTrainControl)\r\n```\r\n\r\nThe final model:\r\n\r\n\r\n```r\r\nmodFit$finalModel\r\n```\r\n\r\n```\r\n## \r\n## Call:\r\n##  randomForest(x = x, y = y, mtry = param$mtry, proximity = TRUE) \r\n##                Type of random forest: classification\r\n##                      Number of trees: 500\r\n## No. of variables tried at each split: 2\r\n## \r\n##         OOB estimate of  error rate: 0.71%\r\n## Confusion matrix:\r\n##      A    B    C    D    E  class.error\r\n## A 3905    1    0    0    0 0.0002560164\r\n## B   19 2632    7    0    0 0.0097817908\r\n## C    0   20 2374    2    0 0.0091819699\r\n## D    0    0   39 2211    2 0.0182060391\r\n## E    0    0    2    6 2517 0.0031683168\r\n```\r\n\r\nWe can see that some observations has been missclassified, the error rate of the model using cross validation is 0.72%, meaning an accuracy of more than 99%. This is really good and we can think that our model may be overfitting the training data.\r\n\r\nTo estimate more realistically the out-of-sample error of our model, we can now use the testing set that we defined earlier. Let's predict the classes of the testing observations and compare to their real values.\r\n\r\n\r\n```r\r\npred <- predict(modFit, testing)\r\nconfusionMatrix(table(pred, testing$classe))\r\n```\r\n\r\n```\r\n## Confusion Matrix and Statistics\r\n## \r\n##     \r\n## pred    A    B    C    D    E\r\n##    A 1673    7    0    0    0\r\n##    B    1 1131   14    0    0\r\n##    C    0    1 1011   20    0\r\n##    D    0    0    1  943    0\r\n##    E    0    0    0    1 1082\r\n## \r\n## Overall Statistics\r\n##                                           \r\n##                Accuracy : 0.9924          \r\n##                  95% CI : (0.9898, 0.9944)\r\n##     No Information Rate : 0.2845          \r\n##     P-Value [Acc > NIR] : < 2.2e-16       \r\n##                                           \r\n##                   Kappa : 0.9903          \r\n##  Mcnemar's Test P-Value : NA              \r\n## \r\n## Statistics by Class:\r\n## \r\n##                      Class: A Class: B Class: C Class: D Class: E\r\n## Sensitivity            0.9994   0.9930   0.9854   0.9782   1.0000\r\n## Specificity            0.9983   0.9968   0.9957   0.9998   0.9998\r\n## Pos Pred Value         0.9958   0.9869   0.9797   0.9989   0.9991\r\n## Neg Pred Value         0.9998   0.9983   0.9969   0.9957   1.0000\r\n## Prevalence             0.2845   0.1935   0.1743   0.1638   0.1839\r\n## Detection Rate         0.2843   0.1922   0.1718   0.1602   0.1839\r\n## Detection Prevalence   0.2855   0.1947   0.1754   0.1604   0.1840\r\n## Balanced Accuracy      0.9989   0.9949   0.9905   0.9890   0.9999\r\n```\r\n\r\nWe can see some missclassification as well on the testing set. The estimated accuracy is 99.32% which is very good. We can confidently use this model for the prediction of the remaining data.\r\n\r\n## Credits\r\n\r\nThe data used in this analysis is provided by http://groupware.les.inf.puc-rio.br/har .\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}